package com.solacesystems.ha;
/**
 * <p>Stores all the state relevant to the cluster member instance including HA state,
 * Sequencing state, and last input/output state messages
 * </p>
 * <p>
 * The cluster model also updates any ClusterEventListeners for all state changes.
 * </p>
 *
 * @param <InputType> input message type; must extend Ordered to ensure a sequence number is present
 * @param <OutputType> output message type; must also extend Ordered to ensure a sequence number is present
 */
public class ClusterModel<InputType extends Ordered, OutputType extends Ordered> {

    /**
     * Constructor for the ClusterModel; the listener is expected to be the application instance
     * that the {@link ClusterConnector} is providing connectivity and availability events for.
     * @param listener the application listener this model upates for every state event. The
     *                 listener is expected to generate OutputType events for each InputType event
     *                 when the model is up-to-date.
     */
    public ClusterModel(ClusterEventListener<InputType,OutputType> listener) {
        _listener = listener;
        _haStatus = HAState.BACKUP;
        _seqStatus= SeqState.INIT;
    }

    /**
     * Retrieve the current HAState value
     * @return current HAState value
     */
    public HAState GetHAStatus() {
        return _haStatus;
    }

    /**
     * Updates the current HAState; triggers a notification to the listener with the old and new HAState values.
     * @param haStatus the new HAState value
     */
    public void SetHAStatus(HAState haStatus) {
        HAState old = _haStatus;
        _haStatus = haStatus;
        _listener.OnHAStateChange(old, haStatus);
    }

    /**
     * Retrieve the current SeqState value
     * @return current SeqState value
     */
    public SeqState GetSequenceStatus() {
        return _seqStatus;
    }

    /**
     * Updates the current SeqState; triggers a notification to the listener with the old and new SeqState values.
     * @param seqStatus the new SeqState value
     */
    public void SetSequenceStatus(SeqState seqStatus) {
        SeqState old = _seqStatus;
        _seqStatus = seqStatus;
        _listener.OnSeqStateChange(old, seqStatus);
    }

    /**
     * Retrieve the last received input value
     * @return current input value
     */
    public InputType GetLastInput() {
        return _lastInput;
    }

    /**
     * Updates the current internal input value; triggers a notification to the listener with the new value.
     * Note that this should only be used to update the model without triggering full application state
     * modification. The proper method for full state change would be {@link ClusterModel#UpdateApplicationState(Ordered)}.
     *
     * @param input the new input value
     */
    public void SetLastInput(InputType input) {
        _lastInput = input;
        _listener.OnApplicationMessage(_lastInput);
    }

    /**
     * Retrieve the last output value generated by the application via the
     * {@link ClusterEventListener#UpdateApplicationState(Ordered)} method.
     *
     * @return current input value
     */
    public OutputType GetLastOutput() {
        return _lastOutput;
    }

    /**
     * Updates the last output instance; triggers a notification to the listener
     * with this value for recovery purposes.
     *
     * @param lastOutput the new SeqState value
     */
    public void SetLastOutput(OutputType lastOutput) {
        _lastOutput = lastOutput;
        _listener.OnInitialStateMessage(lastOutput);
    }

    /**
     * This is an important variation of SetLastInput where the
     * ClusterConnector knows that the cluster instance is up-to-date,
     * so every input requires an updated state output
     *
     * @param input -- the input message driving a potential application state change
     */
    public void UpdateApplicationState(InputType input) {
        _lastOutput = _listener.UpdateApplicationState(input);
        _lastInput = input;
    }

    @Override
    public String toString() {
        return  "] HA = ["  + _haStatus +
                "] SEQ = [" + _seqStatus +
                "] IN = ["  + (_lastInput==null ? "(null)" : _lastInput.getSequenceId()) +
                "] OUT = [" + (_lastOutput==null ? "(null)" : _lastOutput.getSequenceId()) + "]";
    }

    private HAState _haStatus;
    private SeqState _seqStatus;

    private InputType _lastInput;
    private OutputType _lastOutput;

    private final ClusterEventListener<InputType,OutputType> _listener;
}
